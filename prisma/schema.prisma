// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider     = "prisma-client" // no `-js` at the end
  output       = "../src/generated/prisma" // `output` is required
  moduleFormat = "esm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
  SUPER_ADMIN
  RECRUITER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
  REMOTE
}

model User {
  id            String   @id @default(cuid())
  phoneNumber   String   @unique
  googleId      String?  @unique
  role          UserRole @default(STUDENT)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastRefreshId String?
  hasOnboarded  Boolean  @default(false)

  isActive        Boolean  @default(true)
  age             Int?
  gender          Gender?
  name            String?
  email           String?  @unique
  bio             String?
  education       String?
  schoolOrCollege String?
  interests       String[] @default([])
  skills          String[] @default([])

  // Relations
  createdJobs      Job[]     @relation("UserJobs")
  createdCompanies Company[] @relation("UserCompanies")

  @@index([role])
}

model Job {
  id          String  @id @default(cuid())
  title       String
  description String
  type        JobType

  // Details
  overview         String
  salaryRange      String?
  postingUrl       String
  location         String?
  locationKey      String? // normalized for search
  requirements     String[]
  benefits          String[]
  responsibilities String[]
  skills           String[]
  isOpen           Boolean   @default(true)
  expiresAt        DateTime?
  postedAt         DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  company   Company @relation("CompanyJobs", fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  createdBy   User   @relation("UserJobs", fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  @@index([isOpen])
}

model Company {
  id      String  @id @default(cuid())
  name    String  @unique
  website String?

  // Relations
  jobs        Job[]  @relation("CompanyJobs")
  createdBy   User   @relation("UserCompanies", fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}
